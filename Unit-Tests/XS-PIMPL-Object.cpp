/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com
 * @brief       Test case XS::PIMPL::Object
 */

#include <XS-C++.h>
#include <GoogleMock/GoogleMock.h>

/*******************************************************************************
 * Test base class declaration
 ******************************************************************************/

class Base: XS::PIMPL::Object< Base >
{
    public:
        
        using XS::PIMPL::Object< Base >::impl;
        
        Base( void );
        Base( int x, int y );
        int GetX( void );
        int GetY( void );
        void SetX( int x );
        void SetY( int y );
};

/*******************************************************************************
 * Test derived class declaration
 ******************************************************************************/

class Derived: public Base, public XS::PIMPL::Object< Derived >
{
    public:
        
        using XS::PIMPL::Object< Derived >::impl;
        
        Derived( void );
        Derived( int x, int y, int z );
        int GetZ( void );
        void SetZ( int z );
};

#include <XS-C++/PIMPL/Object-IMPL.h>

/*******************************************************************************
 * Test base class definition
 ******************************************************************************/

template<>
class XS::PIMPL::Object< Base >::IMPL
{
    public:
        
        IMPL( int x, int y ): _x( x ), _y( y )
        {}
        
        IMPL( const IMPL & o ): _x( o._x ), _y( o._y )
        {}
        
        ~IMPL( void )
        {}
        
        int _x;
        int _y;
};

template<>
void XS::PIMPL::Object< Base >::D::operator ()( XS::PIMPL::Object< Base >::IMPL * p )
{
    delete p;
}

template class XS::PIMPL::Object< Base >;

Base::Base( void ): XS::PIMPL::Object< Base >( 0, 0 )
{}

Base::Base( int x, int y ): XS::PIMPL::Object< Base >( x, y )
{}

int Base::GetX( void )
{
    return this->impl->_x;
}

int Base::GetY( void )
{
    return this->impl->_y;
}

void Base::SetX( int x )
{
    this->impl->_x = x;
}

void Base::SetY( int y )
{
    this->impl->_y = y;
}

/*******************************************************************************
 * Test derived class definition
 ******************************************************************************/

template<>
class XS::PIMPL::Object< Derived >::IMPL
{
    public:
        
        IMPL( int z ): _z( z )
        {}
        
        IMPL( const IMPL & o ): _z( o._z )
        {}
        
        ~IMPL( void )
        {}
        
        int _z;
};

template<>
void XS::PIMPL::Object< Derived >::D::operator ()( XS::PIMPL::Object< Derived >::IMPL * p )
{
    delete p;
}

template class XS::PIMPL::Object< Derived >;

Derived::Derived( void ): Base( 0, 0 ), XS::PIMPL::Object< Derived >( 0 )
{}

Derived::Derived( int x, int y, int z ): Base( x, y ), XS::PIMPL::Object< Derived >( z )
{}

int Derived::GetZ( void )
{
    return this->impl->_z;
}

void Derived::SetZ( int z )
{
    this->impl->_z = z;
}

/*******************************************************************************
 * Unit tests
 ******************************************************************************/

using namespace testing;

TEST( XS_PIMPL_Object, BaseClassGetter )
{
    Base b;
    
    ASSERT_EQ( 0, b.GetX() );
    ASSERT_EQ( 0, b.GetY() );
}

TEST( XS_PIMPL_Object, BaseClassSetter )
{
    Base b;
    
    b.SetX( 1 );
    b.SetY( 2 );
    
    ASSERT_EQ( 1, b.GetX() );
    ASSERT_EQ( 2, b.GetY() );
}

TEST( XS_PIMPL_Object, BaseClassConstructorWithParams )
{
    Base b( 1, 2 );
    
    ASSERT_EQ( 1, b.GetX() );
    ASSERT_EQ( 2, b.GetY() );
}

TEST( XS_PIMPL_Object, BaseClassCopyConstructor )
{
    Base b1( 1, 2 );
    Base b2( b1 );
    
    ASSERT_EQ( 1, b2.GetX() );
    ASSERT_EQ( 2, b2.GetY() );
}

TEST( XS_PIMPL_Object, BaseClassMoveConstructor )
{
    Base b1( 1, 2 );
    Base b2 = std::move( b1 );
    
    ASSERT_EQ( 1, b2.GetX() );
    ASSERT_EQ( 2, b2.GetY() );
}

TEST( XS_PIMPL_Object, BaseClassAssigmnentOperator )
{
    Base b1( 1, 2 );
    Base b2;
    
    b2 = b1;
    
    ASSERT_EQ( 1, b2.GetX() );
    ASSERT_EQ( 2, b2.GetY() );
}

TEST( XS_PIMPL_Object, DerivedClassGetter )
{
    Derived d;
    
    ASSERT_EQ( 0, d.GetX() );
    ASSERT_EQ( 0, d.GetY() );
    ASSERT_EQ( 0, d.GetZ() );
}

TEST( XS_PIMPL_Object, DerivedClassSetter )
{
    Derived d;
    
    d.SetX( 1 );
    d.SetY( 2 );
    d.SetZ( 3 );
    
    ASSERT_EQ( 1, d.GetX() );
    ASSERT_EQ( 2, d.GetY() );
    ASSERT_EQ( 3, d.GetZ() );
}

TEST( XS_PIMPL_Object, DerivedClassConstructorWithParams )
{
    Derived d( 1, 2, 3 );
    
    ASSERT_EQ( 1, d.GetX() );
    ASSERT_EQ( 2, d.GetY() );
    ASSERT_EQ( 3, d.GetZ() );
}

TEST( XS_PIMPL_Object, DerivedClassCopyConstructor )
{
    Derived d1( 1, 2, 3 );
    Derived d2( d1 );
    
    ASSERT_EQ( 1, d2.GetX() );
    ASSERT_EQ( 2, d2.GetY() );
    ASSERT_EQ( 3, d2.GetZ() );
}

TEST( XS_PIMPL_Object, DerivedClassMoveConstructor )
{
    Derived d1( 1, 2, 3 );
    Derived d2 = std::move( d1 );
    
    ASSERT_EQ( 1, d2.GetX() );
    ASSERT_EQ( 2, d2.GetY() );
    ASSERT_EQ( 3, d2.GetZ() );
}

TEST( XS_PIMPL_Object, DerivedClassAssigmnetOperator )
{
    Derived d1( 1, 2, 3 );
    Derived d2;
    
    d2 = d1;
    
    ASSERT_EQ( 1, d2.GetX() );
    ASSERT_EQ( 2, d2.GetY() );
    ASSERT_EQ( 3, d2.GetZ() );
}
