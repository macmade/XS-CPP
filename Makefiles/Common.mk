#-------------------------------------------------------------------------------
# Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
# Distributed under the Boost Software License, Version 1.0.
# 
# Boost Software License - Version 1.0 - August 17th, 2003
# 
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#-------------------------------------------------------------------------------

# Default target
.DEFAULT_GOAL := all

#-------------------------------------------------------------------------------
# Build type
#-------------------------------------------------------------------------------

# Checks if we're on OS-X to determine the build type
ifeq ($(findstring Darwin, $(shell uname)),)
    BUILD_TYPE  := linux
else
    BUILD_TYPE  := os-x
endif

#-------------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------------

MAKE    := make -s
SHELL   := /bin/bash
_CC      = $(CC) $(FLAGS_WARN) -fPIC -$(FLAGS_OPTIM) -std=$(FLAGS_STD) $(FLAGS_OTHER) -I$(DIR_INC)

# C compiler - Debug mode
ifneq ($(findstring 1,$(DEBUG)),)
_CC     += -DDEBUG=1
_CC     += -g
endif

#-------------------------------------------------------------------------------
# Tools
#-------------------------------------------------------------------------------

# Make version (version 4 allows parallel builds with output sync) 
MAKE_VERSION_MAJOR  := $(shell echo $(MAKE_VERSION) | cut -f1 -d.)
MAKE_4              := $(shell [ $(MAKE_VERSION_MAJOR) -ge 4 ] && echo true)

# Check for the xctool utility
XCTOOL              := $(shell which xctool)
HAS_XCTOOL          := $(shell if [ -f "$(XCTOOL)" ]; then echo true; else echo false; fi )

# Check for the xcodebuild utility
XCBUILD             := $(shell which xcodebuild)
HAS_XCBUILD         := $(shell if [ -f "$(XCBUILD)" ]; then echo true; else echo false; fi )

ifeq ($(HAS_XCBUILD),true)
MAC_TARGET          := $(shell $(XCBUILD) -showsdks | grep macosx | tail -1 | perl -pe 's/[^-]+-sdk [^0-9]+(.*)/\1/g')
IOS_SDK             := $(shell $(XCBUILD) -showsdks | grep iphoneos | tail -1 | perl -pe 's/[^-]+-sdk [^0-9]+(.*)/\1/g')
IOS_SDK_PATH        := /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS$(IOS_SDK).sdk
XCODE_SDK_VALUE     := "$(shell /usr/libexec/PlistBuddy -c "Print $(1)" /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Info.plist)"
endif

#-------------------------------------------------------------------------------
# Paths
#-------------------------------------------------------------------------------

# Root directory
DIR                             := ./

# Root build directory (debug or release)
ifeq ($(findstring 1,$(DEBUG)),)
    DIR_BUILD                   := $(DIR)Build/Release/
else
    DIR_BUILD                   := $(DIR)Build/Debug/
endif

# Relative build directories
DIR_BUILD_PRODUCTS              := $(DIR_BUILD)Products/
DIR_BUILD_PRODUCTS_INTEL_32     := $(DIR_BUILD_PRODUCTS)i386/
DIR_BUILD_PRODUCTS_INTEL_64     := $(DIR_BUILD_PRODUCTS)x86_64/
DIR_BUILD_PRODUCTS_ARM_7        := $(DIR_BUILD_PRODUCTS)armv7/
DIR_BUILD_PRODUCTS_ARM_7S       := $(DIR_BUILD_PRODUCTS)armv7s/
DIR_BUILD_PRODUCTS_ARM_64       := $(DIR_BUILD_PRODUCTS)arm64/
DIR_BUILD_PRODUCTS_UNIVERSAL    := $(DIR_BUILD_PRODUCTS)universal/
DIR_BUILD_TEMP                  := $(DIR_BUILD)Intermediates/
DIR_BUILD_TEMP                  := $(DIR_BUILD)Intermediates/
DIR_BUILD_TEMP_INTEL_32         := $(DIR_BUILD_TEMP)i386/
DIR_BUILD_TEMP_INTEL_64         := $(DIR_BUILD_TEMP)x86_64/
DIR_BUILD_TEMP_ARM_7            := $(DIR_BUILD_TEMP)armv7/
DIR_BUILD_TEMP_ARM_7S           := $(DIR_BUILD_TEMP)armv7s/
DIR_BUILD_TEMP_ARM_64           := $(DIR_BUILD_TEMP)arm64/
DIR_BUILD_TEMP_INTEL_32_BIN     := $(DIR_BUILD_TEMP_INTEL_32)bin/
DIR_BUILD_TEMP_INTEL_32_OBJ     := $(DIR_BUILD_TEMP_INTEL_32)obj/
DIR_BUILD_TEMP_INTEL_64_BIN     := $(DIR_BUILD_TEMP_INTEL_64)bin/
DIR_BUILD_TEMP_INTEL_64_OBJ     := $(DIR_BUILD_TEMP_INTEL_64)obj/
DIR_BUILD_TEMP_ARM_7_BIN        := $(DIR_BUILD_TEMP_ARM_7)bin/
DIR_BUILD_TEMP_ARM_7_OBJ        := $(DIR_BUILD_TEMP_ARM_7)obj/
DIR_BUILD_TEMP_ARM_7S_BIN       := $(DIR_BUILD_TEMP_ARM_7S)bin/
DIR_BUILD_TEMP_ARM_7S_OBJ       := $(DIR_BUILD_TEMP_ARM_7S)obj/
DIR_BUILD_TEMP_ARM_64_BIN       := $(DIR_BUILD_TEMP_ARM_64)bin/
DIR_BUILD_TEMP_ARM_64_OBJ       := $(DIR_BUILD_TEMP_ARM_64)obj/
DIR_BUILD_TESTS                 := $(DIR)Build/Tests/
DIR_BUILD_TESTS_BIN             := $(DIR_BUILD_TESTS)bin/
DIR_BUILD_TESTS_OBJ             := $(DIR_BUILD_TESTS)obj/

#-------------------------------------------------------------------------------
# File suffixes
#-------------------------------------------------------------------------------

EXT_C   := .cpp
EXT_H   := .h
EXT_O   := .o

# Erases implicit rules
.SUFFIXES:

#-------------------------------------------------------------------------------
# Files
#-------------------------------------------------------------------------------

# Gets only the file name of the C files
FILES_C_REL             = $(subst $(DIR_SRC),,$(FILES_C))
FILES_TESTS_REL         = $(subst $(DIR_TESTS),,$(FILES_TESTS))

# Do not include excluded files
FILES_C_REL_EXCL        = $(filter-out $(FILES_C_EXCLUDE),$(FILES_C_REL))

# Replace the code extension by the object one
FILES_C_OBJ             = $(subst $(EXT_C),$(EXT_O),$(FILES_C_REL_EXCL))
FILES_TESTS_OBJ         = $(subst $(EXT_C),$(EXT_O),$(FILES_TESTS_REL))

# Prefix all object files with the build directory for each platform
FILES_C_BUILD_INTEL_32  = $(addprefix $(DIR_BUILD_TEMP_INTEL_32_OBJ),$(FILES_C_OBJ))
FILES_C_BUILD_INTEL_64  = $(addprefix $(DIR_BUILD_TEMP_INTEL_64_OBJ),$(FILES_C_OBJ))
FILES_C_BUILD_ARM_7     = $(addprefix $(DIR_BUILD_TEMP_ARM_7_OBJ),$(FILES_C_OBJ))
FILES_C_BUILD_ARM_7S    = $(addprefix $(DIR_BUILD_TEMP_ARM_7S_OBJ),$(FILES_C_OBJ))
FILES_C_BUILD_ARM_64    = $(addprefix $(DIR_BUILD_TEMP_ARM_64_OBJ),$(FILES_C_OBJ))
FILES_TESTS_BUILD       = $(addprefix $(DIR_BUILD_TESTS_OBJ),$(FILES_TESTS_OBJ))

#-------------------------------------------------------------------------------
# Display
#-------------------------------------------------------------------------------

# Terminal colors
COLOR_NONE      := "\x1b[0m"
COLOR_GRAY      := "\x1b[30;01m"
COLOR_RED       := "\x1b[31;01m"
COLOR_GREEN     := "\x1b[32;01m"
COLOR_YELLOW    := "\x1b[33;01m"
COLOR_BLUE      := "\x1b[34;01m"
COLOR_PURPLE    := "\x1b[35;01m"
COLOR_CYAN      := "\x1b[36;01m"

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

# Gets every C file in a specific source directory
# 
# @1:   The directory with the source files
GET_C_FILES = $(foreach dir,$(1), $(wildcard $(dir)*$(EXT_C)))

# Prints a message about a file
# 
# @1:   The first message part
# @2:   The architecture
# @3:   The file
PRINT_FILE  = $(call PRINT,$(1),$(2),XS.$(patsubst %.,%,$(subst /,.,$(subst ./,,$(dir $(patsubst $(DIR_SRC)%,%,$<))/))))$(COLOR_GRAY)"$(notdir $(3))"$(COLOR_NONE)

# Prints a message
# 
# @1:   The first message part
# @2:   The architecture
# @3:   The second message part
ifeq ($(findstring 1,$(DEBUG)),)
PRINT       = "["$(COLOR_GREEN)" $(PRODUCT) "$(COLOR_NONE)"]> $(1) [ "$(COLOR_CYAN)"Release - $(2)"$(COLOR_NONE)" ]: "$(COLOR_YELLOW)"$(3)"$(COLOR_NONE)
else
PRINT       = "["$(COLOR_GREEN)" $(PRODUCT) "$(COLOR_NONE)"]> $(1) [ "$(COLOR_CYAN)"Debug - $(2)"$(COLOR_NONE)" ]: "$(COLOR_YELLOW)"$(3)"$(COLOR_NONE)
endif
