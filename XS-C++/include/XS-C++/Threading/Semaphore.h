/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com
 * @brief       Declaration of the XS::Threading::Semaphore class
 */

#ifndef __XSCPP_THREADING_SEMAPHORE_H__
#define __XSCPP_THREADING_SEMAPHORE_H__

namespace XS
{
    namespace Threading
    {
        /*!
         * @brief           Semaphore class
         */
        class Semaphore: public XS::PIMPL::Object< Semaphore >
        {
            public:
                
                using PIMPL::Object< Semaphore >::impl;
                
                Semaphore( unsigned int count = 1, std::string name = "" );
                Semaphore( const Semaphore & o ) = delete;
                Semaphore & operator =( Semaphore o ) = delete;
                bool TryWait( void );
                void Wait( void );
                void Signal( void );
                bool IsNamed( void );
                std::string GetName( void );
        };
    }
}

#endif /* __XSCPP_THREADING_SEMAPHORE_H__ */
