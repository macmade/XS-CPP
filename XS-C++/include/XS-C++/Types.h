/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @header      Types.h
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com
 * @abstract    XS-C++ common types
 */

#ifndef __XSCPP_TYPES_H__
#define __XSCPP_TYPES_H__

/*
 * Using stdint.h rather than cstdint as exact-width integer types
 * are optional
 */
#ifndef WIN32
extern "C" {
    #include <stdint.h>
}
#endif

namespace XS
{
    /*!
     * @typedef     XS::Int8
     * @abstract    Exact-width 8 bits signed integer
     */
    #ifdef _WIN32
    typedef __int8 Int8;
    #else
    typedef int8_t Int8;
    #endif
    
    /*!
     * @typedef     XS::UInt8
     * @abstract    Exact-width 8 bits unsigned integer
     */
    #ifdef _WIN32
    typedef unsigned __int8 UInt8;
    #else
    typedef uint8_t UInt8;
    #endif
    
    /*!
     * @typedef     XS::Int16
     * @abstract    Exact-width 16 bits signed integer
     */
    #ifdef _WIN32
    typedef __int16 Int16;
    #else
    typedef int16_t Int16;
    #endif
    
    /*!
     * @typedef     XS::UInt16
     * @abstract    Exact-width 16 bits unsigned integer
     */
    #ifdef _WIN32
    typedef unsigned __int16 UInt16;
    #else
    typedef uint16_t UInt16;
    #endif
    
    /*!
     * @typedef     XS::Int32
     * @abstract    Exact-width 32 bits signed integer
     */
    #ifdef _WIN32
    typedef __int32 Int32;
    #else
    typedef int32_t Int32;
    #endif
    
    /*!
     * @typedef     XS::UInt32
     * @abstract    Exact-width 32 bits unsigned integer
     */
    #ifdef _WIN32
    typedef unsigned __int32 UInt32;
    #else
    typedef uint32_t UInt32;
    #endif
    
    /*!
     * @typedef     XS::Int64
     * @abstract    Exact-width 64 bits signed integer
     */
    #ifdef _WIN32
    typedef __int64 Int64;
    #else
    typedef int64_t Int64;
    #endif
    
    /*!
     * @typedef     XS::UInt64
     * @abstract    Exact-width 64 bits unsigned integer
     */
    #ifdef _WIN32
    typedef unsigned __int64 UInt64;
    #else
    typedef uint64_t UInt64;
    #endif
    
    /*!
     * @var         XS::Int8Max
     * @abstract    Maximum value for XS::Int8
     */
    const Int8 Int8Max = 0x7F;
    
    /*!
     * @var         XS::Int16Max
     * @abstract    Maximum value for XS::Int16
     */
    const Int16 Int16Max = 0x7FFF;
    
    /*!
     * @var         XS::Int32Max
     * @abstract    Maximum value for XS::Int32
     */
    const Int32 Int32Max = 0x7FFFFFFF;
    
    /*!
     * @var         XS::Int64Max
     * @abstract    Maximum value for XS::Int64
     */
    const Int64 Int64Max = 0x7FFFFFFFFFFFFFFF;
    
    /*!
     * @var         XS::UInt8Max
     * @abstract    Maximum value for XS::UInt8
     */
    const UInt8 UInt8Max = 0xFF;
    
    /*!
     * @var         XS::UInt16Max
     * @abstract    Maximum value for XS::UInt16
     */
    const UInt16 UInt16Max = 0xFFFF;
    
    /*!
     * @var         XS::UInt32Max
     * @abstract    Maximum value for XS::UInt32
     */
    const UInt32 UInt32Max = 0xFFFFFFFF;
    
    /*!
     * @var         XS::UInt64Max
     * @abstract    Maximum value for XS::UInt64
     */
    const UInt64 UInt64Max = 0xFFFFFFFFFFFFFF;
    
    /*!
     * @var         XS::Int8Min
     * @abstract    Minimum value for XS::Int8
     */
    const Int8 Int8Min = static_cast< Int8  >( -Int8Max - 1 );
    
    /*!
     * @var         XS::Int16Min
     * @abstract    Minimum value for XS::Int16
     */
    const Int16 Int16Min = static_cast< Int16 >( -Int16Max - 1 );
    
    /*!
     * @var         XS::Int32Min
     * @abstract    Minimum value for XS::Int32
     */
    const Int32 Int32Min = static_cast< Int32 >( -Int32Max - 1 );
    
    /*!
     * @var         XS::Int64Min
     * @abstract    Minimum value for XS::Int64
     */
    const Int64 Int64Min = static_cast< Int64 >( -Int64Max - 1 );
}

#endif /* __XSCPP_TYPES_H__ */
