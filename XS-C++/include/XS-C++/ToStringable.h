/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @header      Mutex.h
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com
 * @abstract    Declaration of the XS::ToStringable interface
 */

#ifndef __XSCPP_TO_STRINGABLE_H__
#define __XSCPP_TO_STRINGABLE_H__

namespace XS
{
    /*!
     * @class           XS::ToStringable
     * @abstract        Interface for objects having a string representation
     */
    class ToStringable
    {
        public:
            
            /*!
             * @function    ~ToStringable
             * @abstract    Class destructor
             * @discussion  Nothing to do here - The destructor is defined
             *              so the compiler does not complain about the
             *              class having virtual functions without a
             *              virtual destructor.
             */
            virtual ~ToStringable( void )
            {}
            
            /*!
             * @function    ToString
             * @abstract    Gets a string representation of the object
             * @return      The string representation of the object
             */
            virtual std::string ToString( void ) const = 0;
            
            /*!
             * @function    operator <<
             * @abstract    Writes a string representation of an object in an output stream object
             * @param       os      The output stream object
             * @param       obj     The object
             * @return      The output stream object
             */
            friend std::ostream & operator << ( std::ostream & os, const ToStringable & obj );
    };
}

#endif /* __XSCPP_TO_STRINGABLE_H__ */
